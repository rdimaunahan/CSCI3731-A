1. What is wrong with the following code and how would you fix it?
#ifndef PROJECTILE_H
#define PROJECTILE_H
class Projectile {
private:
double position;
double velocity;
public:
Projectile(double position, double velocity);
virtual ˜Projectile();
double getPosition() const;
double getVelocity() const;
} // end of Projecile class
#endif

Private variables are not initialized. Should both be equal to zero for safe usage. Missing semicolon after closing bracket. Missing set method "void set(double position, double velocity);".

2. The following is the definition of the constructor for the Projectile class above, but there are three things wrong with it. What are they and how would you fix them?
Projectile(int position, int velocity) {
this.position = position;
this.velocity = velocity;
} // end of constructor

-in the main class double variable was passed but the code above takes in int variable
-Header should be Projectile::Projectile telling the compiler that the Projectile method is a part of the Projectile class
-Declaration should be this->position = position, same with velocity or (*this).position = position

3. Describe each of the following methods
(a) int* method(int* arg); takes in a pointer to an int and returns a pointer to an int
(b) const int* method(int* arg); takes in a pointer to an int and returns a pointer to const int
(c) const int* const method(int* arg); const method that takes in a pointer to an int and returns a pointer to a const int
(d) const int* const method(const int* arg); const method thattakes in a pointer to a const int and returns a pointer to a const int 
(e) const int* const method(const int* arg) const; const method thattakes in a pointer to a const int and returns a pointer to a const int and the method does not modify object in the process

4. In what ways are C++ strings better than C strings? In what ways are C strings better than C++ strings?
C strings are null terminated arrays of chars, it is an elegant, lightweight, and efficient design,  but it has led to a large fraction of the computer security holes that exist today. C string does not carry its length so you need to keep watch on it or do some math to access it. Still it should be learned and used because it is a string literals, the use of C libraries that uses C string, and using it with performance-critical code. C++ strings are safer and more convenient to use than C strings. C++ strings comes with interfaces which are much more intuitive to use, leading to less chances of messing up argument order. 

5. What is the difference between a pointer and a reference?

Pointer gives a direct access to the memory location of a variable but you always need to dereferenced it. Reference is a pointer but is it automatically dereferenced, after initialization you can't change what it points to, and when you declare a reference, you must initialize it to point to a valid variable.

6. What is a destructor for?
Destructor is called when a class is deleted either when an object on the stack goes out of scope or when an object on the heap is deleted. Its main purpose is to delete heap data created by the object.